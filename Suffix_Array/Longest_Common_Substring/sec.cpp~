/**
 * Suffix Array : O(n (lg n)^2) 
 * LCP : O(n lg n)
 *
 * Author: thecodekaiser
 */

#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <cstdlib>

using namespace std;
#define MAXLVL 32
#define MAXLEN 500005

struct tuple
{
	int nr[2];	
	int pos;	// Stores the original position
}L[MAXLEN];


int SORT_INDEX[MAXLVL][MAXLEN]; 	// To store sort index
int step, cnt;

// Custom sorting function 
int comp(tuple A, tuple B)
{
	return (A.nr[0] == B.nr[0])? (A.nr[1] < B.nr[1] ? 1 : 0) : (A.nr[0] < B.nr[0] ? 1 : 0);
}

// Function : To give an integer array that represents the string's suffixes sorted lexicographically
int * buildSA(string str)
{
	int N = str.size();

	// Now create an array to hold the SortIndex
	for(int i = 0; i < MAXLVL; i++)
		for(int j = 0; j < N; j++)
			SORT_INDEX[i][j] =0;

	// Sort by the first character
	for(int i = 0; i < N; i++)
		SORT_INDEX[0][i] = (int)str[i];

	// Now sort for subsequent levels
	cnt = 1;
	step = 1;
	for( ; cnt < N; step++, cnt *= 2)
	{
		for(int i = 0; i < N; i++)
		{
			L[i].nr[0] = SORT_INDEX[step-1][i];
			L[i].nr[1] = i + cnt < N ? SORT_INDEX[step-1][i+cnt] : -1;		// Set -1 if there is no size left
			L[i].pos = i;
		}

		// Now call the sort function 
		sort(L, L+N, comp);
	
		// Update the sort index with the new values
		for(int i = 0; i < N; i++)
		{
			SORT_INDEX[step][L[i].pos] = i > 0 && L[i].nr[0] == L[i-1].nr[0] && L[i].nr[1] == L[i-1].nr[1] ? SORT_INDEX[step][L[i-1].pos] : i;
		// Check if this value is in the same bucket as the last one
		// If yes then give it this bucket only
		// Else give a new bucket
		}
	}

	// Now we have the suffixes sorted and we can use the info stored in the last step to create the suffix array
	int * SA = (int *) malloc(N * sizeof(int));
	for(int i = 0; i < N; i++)
		SA[i] = L[i].pos;
	
	// Now return this result
	return SA;
}


// Function : To find the longest common prefix between two prefixes
int lcp_Pre(int x, int y, int N)
{
	int ret = 0, k;
	if(x == y) return N - x;
	for(k = step - 1; k >= 0 && x < N && y < N; k--)
	{
		if (SORT_INDEX[k][x] == SORT_INDEX[k][y])
			x += 1 << k, y += 1 << k, ret += 1 << k;
	}
	return ret;
}

int main()
{
	string str1, str2, str3;
	
	cin >> str1;
	cin >> str2;

	int len = str1.size();
	str3 = str1 + '$' + str2;

	int N = str3.size();
	int * res = buildSA(str3);
	
/*	cout << "DONE" << endl;

	for(int i = 0; i < N; i++)
		cout << res[i] << " " << str3.substr(res[i]) << endl;

	for(int i = 1; i < N; i++)
		cout << lcp_Pre(res[i-1],res[i],N) << " ";
	cout << endl;
*/	

	int ans = 0, index = 1 << 30;

	for(int i = 1; i < N; i++)  
		if (res[i] < len)
		{
		     int j1, j2; j1 = i; j2 = i;
		     do {
		          j1--;
		          if(res[j1] <= len) break;
		          int temp = lcp_Pre(res[i],res[j1],N);
		          if(ans < temp) {ans = temp; index = res[j1];} else if(ans == temp) index = min(index,res[j1]);
		        } while(j1 >= 0);
	 
		     do{
		         j2++;
			 if(j2 == N) break;
		         if(res[j2] <= len) break;
		         int temp = lcp_Pre(res[i],res[j2],N);
		         if(ans < temp) {ans = temp; index = res[j2];} else if(ans==temp) index = min(index,res[j2]);
		       } while(j2 < N);
		}
	

//	cout << "OUT" << endl;
//	cout << index << " " << ans << endl;
	if(ans == 0)
		cout << "0" << endl;
	else
		cout << str3.substr(index,ans) << endl;

	return 0;
}
