// Author: thecodekaiser
// This one uses BFS
#include <bits/stdc++.h>
using namespace std;

void solve()
{
	int N, M;		// N -> No of vertices, M -> No of edges
	cin >> N >> M;	

	vector<int> gph[N+1];
	int A, B;

	for(int i = 0; i < M; i++)
	{
		cin >> A >> B;
		gph[A].push_back(B);
		gph[B].push_back(A);
	}

	vector<bool> vis(N+1,0);	
	vector<int> col(N+1, 0);
	
	for(int i = 0; i <= N; i++)
		col[i] = -1;

	// Do a BFS and assign colors
	col[1] = 1;
	int flag = 0;
	
	vis[1] = 1;

	queue<int> q;
	q.push(1);
	while(!q.empty())
	{
		int t = q.front();
		q.pop();

		for(int i = 0; i < gph[t].size(); i++)
		{
			int child = gph[t][i];
			
			if(col[child] == col[t])
			{
				flag = 1;
				while(!q.empty()) q.pop();
				break;
			}

			if(!vis[child])
			{
				q.push(child);

				if(col[t] == 1)
					col[child] = 2;
				else
					col[child] = 1;

				vis[child] = 1;
			}
		}
	}

	if(!flag)
		cout << "It is a bipartite graph\n";
	else
		cout << "No, it is not a bipartite graph\n";

	return;
}

int main()
{
	solve();
	return 0;
}
	
	
