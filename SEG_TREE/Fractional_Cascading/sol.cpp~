/**
 * Fractional cascading reduces the time for binary search to lg N in a merge sort tree.
 * Generally we have to look in all (lg N) lists and do a binary search in each but here we are 
 * saved :)
 * I am using this technique on the question Chef and Inversions.
 * This question can be easily solved in (N (lg N)^2) using just the merge sort tree but we are 
 * required to solve this question in (N lg N) upper bound.
 * So let's do it.
 * Author : thecodekaiser
 **/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define INF 1000000007
#define MXN 200010

struct node
{
	int * arr, * ls, * rs;
	int sz;
} tree[4*MXN];

ll INV;
int ptr[MXN];		// This is the array where we store the integers
int pLB[MXN], pUB[MXN];
int ans_list[30][3];		// One will store LB, other UB, and one other the size of interval
int N, M, id, q_start, q_end, si, sj;


// Merger of two lists from children
void merge(int Node, int lc, int rc)
{
	int i = 0, j = 0, k = 0;

	while(i < tree[lc].sz and j < tree[rc].sz)
	{
		if(tree[lc].arr[i] > tree[rc].arr[j])
		{
			INV += (tree[lc].sz - i);
			tree[Node].arr[k++] = tree[rc].arr[j++];
		}
		else
		{
			tree[Node].arr[k++] = tree[lc].arr[i++];
		}
	}

	while(i < tree[lc].sz)
		tree[Node].arr[k++] = tree[lc].arr[i++];

	while(j < tree[rc].sz)
		tree[Node].arr[k++] = tree[rc].arr[j++];

	return;
}

// Cascader
void cascade(int Node, int child, int code = 0)
{
	int i = 0, j = 0;
	while(i < tree[Node].sz)
	{
		// Find the first position in child array where we will find arr[i] if we binary search for it in this array
		while(tree[Node].arr[i] > tree[child].arr[j] and j < tree[child].sz)	j++;	
		
		if(!code)
			tree[Node].ls[i++] = j;		// Fill up the array for the left-traversal
		else
			tree[Node].rs[i++] = j;		// Fill up the array for the right-traversal
	}

	if(!code)
		tree[Node].ls[i] = tree[child].sz;
	else
		tree[Node].rs[i] = tree[child].sz;

	return;
}

// Builder
void build(int Node, int l, int r)
{
	if(l == r)
	{
		tree[Node].arr = (int *) malloc (1 * sizeof(int));
		tree[Node].sz = 1;
		tree[Node].arr[0] = ptr[l];
		return;
	}

	int left = 2 * Node, right = 2 * Node + 1, mid = (l+r)/2;

	build(left, l, mid);	build(right, mid+1, r);

	tree[Node].sz = r - l + 1;	// Determining the size
	tree[Node].arr = (int * ) malloc ((r-l+3) * sizeof(int));
	tree[Node].ls  = (int * ) malloc ((r-l+3) * sizeof(int));
	tree[Node].rs  = (int * ) malloc ((r-l+3) * sizeof(int));

	merge(Node, left, right);	// Creating the arr list for this node and also calculating the inversions
			
	cascade(Node, left, 0);		// Creating the ls list for this node
	cascade(Node, right, 1);	// Creating the rs list for this node
	
	return;
}

// Function : Does an upper bound search for a value in the arr list of a Node in the segment tree
int uSearch(int Node, ll val)
{
	int lo = 0, hi = tree[Node].sz-1;

	int mid;
	while(lo <= hi)
	{
		mid = (lo+hi)>>1;
		if(tree[Node].arr[mid] <= val)
			lo = mid+1;
		else
			hi = mid-1;
	}
	return lo;
}

// Function : Does a lower bound search for a value in the arr list of a Node in the segment tree
int lSearch(int Node, ll val)
{
	int lo = 0, hi = tree[Node].sz - 1;
	int mid;

	while(lo <= hi)
	{
		mid = (lo+hi)>>1;

		if(tree[Node].arr[mid] >= val)
			hi = mid-1;
		else
			lo = mid+1;
	}

	return lo;
}


int LB[MXN], UB[MXN];
int l[MXN], r[MXN];
int node_list[MXN];		// Maintains the list of node to be maintained

// Here we are doing an iterative traversal of the seg tree
void query(int lower_bound, int upper_bound)
{
	int pt = 0, i = 0;
	node_list[pt] = 1, l[pt] = 0, r[pt] = N-1;
	LB[i] = lower_bound, UB[i] = upper_bound;

	while(i <= pt)
	{
		if(r[i] < q_start or l[i] > q_end)
		{ i++;	continue;  }


		if(q_start <= l[i] and r[i] <= q_end)
		{
			// Now we update the ans_list
			ans_list[++id][2] = tree[node_list[i]].sz;	// Index 2 is storing the size of this segment
			ans_list[id][0]   = LB[i];	// Index 0 will store the lower bound in this segment
			ans_list[id][1]   = UB[i];	// Index 1 will store the upper bound in this segment
		
			i++;
			continue;
		}

		int left = 2 * node_list[i], right = 2 * node_list[i] + 1, mid = (l[i] + r[i])/2;

		if(mid < q_start or l[i] > q_end);
		else
			node_list[++pt] = left, l[pt] = l[i], r[pt] = mid, LB[pt] = tree[node_list[i]].ls[LB[i]], UB[pt] = tree[node_list[i]].ls[UB[i]];

		if(q_end < mid+1 or r[i] < q_start);
		else
			node_list[++pt] = right, l[pt] = mid+1, r[pt] = r[i], LB[pt] = tree[node_list[i]].rs[LB[i]], UB[pt] = tree[node_list[i]].rs[UB[i]];

		i++;
	}
	return;
}

	

void swap(int & a, int & b)
{    int temp = a; a = b; b = temp;	}

void solve()
{
	cin >> N >> M;
	for(int i = 0; i < N; i++)
		cin >> ptr[i];

	build(1,0,N-1);

	for(int i = 0; i < N; i++)
	{
		pLB[i] = lSearch(1, ptr[i]);	// Save the index for the lower bound search for ptr[i] in range (0,N)
		pUB[i] = uSearch(1, ptr[i]);	// Save the index for the upper bound search for ptr[i] in range (0,N)
	}

	for(int i = 0; i < M; i++)
	{
		cin >> si >> sj;

		si--, sj--;

		ll ans = INV;

		if(si > sj) swap(si, sj);

		q_start = si+1;
		q_end   = sj-1;

		if	(ptr[si] > ptr[sj]) 		ans--;
		else if	(ptr[sj] > ptr[si]) 		ans++;
	
		id = -1;
		query(pLB[si], pUB[si]);

		for(int j = 0; j <= id; j++)
		{

			ans += (ans_list[j][2] - ans_list[j][1]) - ans_list[j][0];	// For the q_start we have to add
											// (Size - Upper_bound) - lower_bound in each list
		}


		id = -1;

		query(pLB[sj], pUB[sj]);

		for(int j = 0; j <= id; j++)
		{
			ans += ans_list[j][0] - (ans_list[j][2] - ans_list[j][1]);	// For the q_end we have to add
											// Lower_bound - (Size - Upper bound) in each list
		}	

		cout << ans << "\n";
	}
	return;
}


int main()
{
	solve();
	return 0;
}
